Access the Chat GPT conversation here:
https://chat.openai.com/share/ff5c20f2-9b9d-412f-83d6-5228b7e7a156

CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    dob DATE,
    gender ENUM('Male', 'Female', 'Other'),
    address VARCHAR(500),
    join_date DATETIME NOT NULL,
    last_active_datetime DATETIME,
    challenge_code VARCHAR(50),
    active_challenge_groups VARCHAR(255), -- Store as comma-separated values or JSON array, depending on the database capabilities
    profile_picture VARCHAR(255), -- Assuming the image URL will be stored
    height FLOAT, -- Store height in cm or inches as a decimal value
    weight FLOAT, -- Store weight in kg or lbs as a decimal value
    timezone VARCHAR(100),
    preferred_communication ENUM('Email', 'Phone', 'Both'),
    notification_settings TEXT, -- Store as JSON or serialized data, depending on the database capabilities
    activity_points INT DEFAULT 0 -- Assuming activity points are integers and start at 0
);

CREATE INDEX idx_phone ON User (phone);




CREATE TABLE Community (
    community_id VARCHAR(255) PRIMARY KEY,
    community_name VARCHAR(255) NOT NULL,
    community_heads_user_id INT NOT NULL,
    created_by_user_id INT NOT NULL,
    season_array TEXT, -- Store as JSON or serialized data, depending on the database capabilities
    invitations_sent TEXT, -- Store as JSON or serialized data, depending on the database capabilities
    invitations_accepted INT DEFAULT 0,
    invitations_rejected INT DEFAULT 0,
    created_datetime DATETIME NOT NULL,
    last_updated_datetime DATETIME,
    description TEXT,
    members_count INT DEFAULT 0,
    active_season_id VARCHAR(255) -- Optional, if applicable
);

CREATE UNIQUE INDEX idx_community_id ON Community (community_id);
CREATE INDEX idx_community_heads_user_id ON Community (community_heads_user_id);
CREATE INDEX idx_created_by_user_id ON Community (created_by_user_id);
CREATE INDEX idx_community_name ON Community (community_name);





CREATE TABLE Seasons (
    season_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    num_challenges INT,
    assigned_challenges_id_array TEXT, -- Store as JSON or serialized data, depending on the database capabilities
    description TEXT,
    created_by_user_id INT, -- Optional, if applicable
    created_datetime DATETIME NOT NULL,
    last_updated_datetime DATETIME,
    active BOOLEAN DEFAULT false
);

CREATE UNIQUE INDEX idx_season_id ON Seasons (season_id);
CREATE INDEX idx_start_date ON Seasons (start_date);
CREATE INDEX idx_end_date ON Seasons (end_date);




CREATE TABLE Challenge (
    challenge_id INT PRIMARY KEY AUTO_INCREMENT,
    community_head_user_id INT NOT NULL,
    challenge_name VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    created_datetime DATETIME NOT NULL,
    last_updated_datetime DATETIME,
    active BOOLEAN DEFAULT false,
    completed BOOLEAN DEFAULT false
);

CREATE UNIQUE INDEX idx_challenge_id ON Challenge (challenge_id);
CREATE INDEX idx_start_date ON Challenge (start_date);
CREATE INDEX idx_end_date ON Challenge (end_date);
CREATE INDEX idx_active ON Challenge (active);




CREATE TABLE Activities (
    activity_id INT PRIMARY KEY,
    activity_name VARCHAR(255) NOT NULL,
    activity_type ENUM('Task', 'Event', 'Options') NOT NULL,
    num_options INT, -- Only when activity_type = 'Options'
    min_to_complete INT, -- Only when activity_type = 'Options'
    sub_activities JSON -- Store as JSON or serialized data, depending on the database capabilities
);
CREATE UNIQUE INDEX idx_activity_id ON Activities (activity_id);





CREATE TABLE Task (
    cid INT AUTO_INCREMENT PRIMARY KEY,
    activity_id INT NOT NULL,
    task_name VARCHAR(255) NOT NULL,
    task_description TEXT,
    task_quantity INT,
    task_unit VARCHAR(50),
    task_period INT,
    task_period_unit ENUM('day', 'month'),
    task_number INT,
    times_to_complete INT,
    start_date DATE,
    end_date DATE
);
CREATE INDEX idx_task_activity_id ON Task (activity_id);
CREATE INDEX idx_task_start_date ON Task (start_date);
CREATE INDEX idx_task_end_date ON Task (end_date);






CREATE TABLE Event (
    cid INT AUTO_INCREMENT PRIMARY KEY,
    activity_id INT NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    event_description TEXT,
    start_date DATE,
    end_date DATE,
    event_frequency INT
);
CREATE INDEX idx_event_activity_id ON Event (activity_id);
CREATE INDEX idx_event_start_date ON Event (start_date);
CREATE INDEX idx_event_end_date ON Event (end_date);







CREATE TABLE Group (
    group_id VARCHAR(255) PRIMARY KEY,
    num_opts INT,
    min_to_comp INT,
    activity JSON -- Store as JSON or serialized data, depending on the database capabilities
);
CREATE UNIQUE INDEX idx_group_id ON Group (group_id);




CREATE TABLE ActivityStatus (
    user_id INT NOT NULL,
    challenge_id INT NOT NULL,
    activity_id INT NOT NULL,
    date DATE NOT NULL,
    timestamp DATETIME NOT NULL,
    quantity INT,
    PRIMARY KEY (user_id, challenge_id, activity_id, date)
);
CREATE UNIQUE INDEX idx_activity_status_pk ON ActivityStatus (user_id, challenge_id, activity_id, date);
CREATE INDEX idx_activity_status_user_id ON ActivityStatus (user_id);
CREATE INDEX idx_activity_status_challenge_id ON ActivityStatus (challenge_id);
CREATE INDEX idx_activity_status_activity_id ON ActivityStatus (activity_id);
CREATE INDEX idx_activity_status_date ON ActivityStatus (date);
